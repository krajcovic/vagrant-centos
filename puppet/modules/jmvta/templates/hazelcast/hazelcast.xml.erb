<?xml version="1.0" encoding="UTF-8"?>
<hazelcast xsi:schemaLocation="http://www.hazelcast.com/schema/config hazelcast-basic.xsd"
	xmlns="http://www.hazelcast.com/schema/config" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<group>
		<name><%= hz_group_name %></name>
		<password><%= hz_group_password %></password>
	</group>

	<properties>
		<property name="hazelcast.merge.first.run.delay.seconds">5</property>
		<property name="hazelcast.merge.next.run.delay.seconds">5</property>
		<property name="hazelcast.initial.min.cluster.size">1</property>
		<property name="hazelcast.version.check.enabled">false</property>
		<property name="hazelcast.socket.bind.any">false</property>
		<property name="hazelcast.icmp.enabled">true</property>
		<property name="hazelcast.jmx">true</property>
	</properties>

	<network>
		<port auto-increment="false"><%= hz_port %></port>

		<join>
			<multicast enabled="true">
				<multicast-group>224.2.2.3</multicast-group>
				<multicast-port>55000</multicast-port>
			</multicast>
		</join>

		<interfaces enabled="true">
			<interface><%= ipaddress_eth1 %></interface>
		</interfaces>

		<symmetric-encryption enabled="false">
			<!-- encryption algorithm such as DES/ECB/PKCS5Padding, PBEWithMD5AndDES, 
				AES/CBC/PKCS5Padding, Blowfish, DESede -->
			<algorithm>PBEWithMD5AndDES</algorithm>
			<!-- salt value to use when generating the secret key -->
			<salt>thesalt</salt>
			<!-- pass phrase to use when generating the secret key -->
			<password>thepass</password>
			<!-- iteration count to use when generating the secret key -->
			<iteration-count>19</iteration-count>
		</symmetric-encryption>

		<asymmetric-encryption enabled="false">
			<!-- encryption algorithm -->
			<algorithm>RSA/NONE/PKCS1PADDING</algorithm>
			<!-- private key password -->
			<keyPassword>thekeypass</keyPassword>
			<!-- private key alias -->
			<keyAlias>local</keyAlias>
			<!-- key store type -->
			<storeType>JKS</storeType>
			<!-- key store password -->
			<storePassword>thestorepass</storePassword>
			<!-- path to the key store -->
			<storePath>keystore</storePath>
		</asymmetric-encryption>
	</network>

	<executor-service>
		<core-pool-size>16</core-pool-size>
		<max-pool-size>64</max-pool-size>
		<keep-alive-seconds>60</keep-alive-seconds>
	</executor-service>

	<queue name="default">

		<!-- Maximum size of the queue. When a JVM's local queue size reaches the 
			maximum, all put/offer operations will get blocked until the queue size of 
			the JVM goes down below the maximum. Any integer between 0 and Integer.MAX_VALUE. 
			0 means Integer.MAX_VALUE. Default is 0. -->
		<max-size-per-jvm>0</max-size-per-jvm>

		<!-- Name of the map configuration that will be used for the backing distributed 
			map for this queue. -->
		<backing-map-ref>default</backing-map-ref>

	</queue>

	<map name="default">
		<!-- Number of backups. If 1 is set as the backup-count for example, then 
			all entries of the map will be copied to another JVM for fail-safety. Valid 
			numbers are 0 (no backup), 1, 2, 3. -->
		<backup-count>2</backup-count>
		<!-- Valid values are: NONE (no eviction), LRU (Least Recently Used), LFU 
			(Least Frequently Used). NONE is the default. -->
		<eviction-policy>LRU</eviction-policy>
		<!-- Maximum size of the map. When max size is reached, map is evicted 
			based on the policy defined. Any integer between 0 and Integer.MAX_VALUE. 
			0 means Integer.MAX_VALUE. Default is 0. -->
		<max-size policy="cluster_wide_map_size">0</max-size>
		<!-- When max. size is reached, specified percentage of the map will be 
			evicted. Any integer between 0 and 100. If 25 is set for example, 25% of 
			the entries will get evicted. -->
		<eviction-percentage>25</eviction-percentage>

		<!-- While recovering from split-brain (network partitioning), map entries 
			in the small cluster will merge into the bigger cluster based on the policy 
			set here. When an entry merge into the cluster, there might an existing entry 
			with the same key already. Values of these entries might be different for 
			that same key. Which value should be set for the key? Conflict is resolved 
			by the policy set here. Default policy is hz.ADD_NEW_ENTRY There are built-in 
			merge policies such as hz.NO_MERGE ; no entry will merge. hz.ADD_NEW_ENTRY 
			; entry will be added if the merging entry's key doesn't exist in the cluster. 
			hz.HIGHER_HITS ; entry with the higher hits wins. hz.LATEST_UPDATE ; entry 
			with the latest update wins. -->
		<merge-policy>hz.ADD_NEW_ENTRY</merge-policy>
	</map>

	<map name="heartbeat">
		<backup-count>2</backup-count>
		<eviction-policy>LRU</eviction-policy>
		<max-size policy="cluster_wide_map_size">0</max-size>
		<eviction-percentage>25</eviction-percentage>
		<merge-policy>hz.ADD_NEW_ENTRY</merge-policy>
	</map>

 	<queue name="sms-send-queue">
		<max-size-per-jvm>0</max-size-per-jvm>
		<backing-map-ref>sms-send-queue-map</backing-map-ref>
	</queue>

	<map name="sms-send-queue-map">
		<backup-count>2</backup-count>
		<eviction-policy>NONE</eviction-policy>
		<max-size policy="cluster_wide_map_size">0</max-size>
		<eviction-percentage>25</eviction-percentage>
		<merge-policy>hz.ADD_NEW_ENTRY</merge-policy>
	</map>

	<map name="sms-message-id">
		<backup-count>2</backup-count>
		<time-to-live-seconds>86400</time-to-live-seconds>
		<eviction-policy>LRU</eviction-policy>
		<max-size policy="cluster_wide_map_size">50000</max-size>
		<eviction-percentage>25</eviction-percentage>
		<merge-policy>hz.ADD_NEW_ENTRY</merge-policy>
	</map>

 	<queue name="payment-queue">
		<max-size-per-jvm>0</max-size-per-jvm>
		<backing-map-ref>payment-queue-map</backing-map-ref>
	</queue>

	<map name="payment-queue-map">
		<backup-count>2</backup-count>
		<eviction-policy>NONE</eviction-policy>
		<max-size policy="cluster_wide_map_size">0</max-size>
		<eviction-percentage>25</eviction-percentage>
		<merge-policy>hz.ADD_NEW_ENTRY</merge-policy>
	</map>

</hazelcast>